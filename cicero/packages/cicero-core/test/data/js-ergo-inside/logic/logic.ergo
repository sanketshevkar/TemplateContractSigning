namespace io.clause.latedeliveryandpenalty

import org.accordproject.cicero.runtime.*
import org.accordproject.time.*

/* From template:
Late Delivery and Penalty. In case of delayed delivery{{" except for Force Majeure cases,":? forceMajeure}} the Seller shall pay to the Buyer for every {{penaltyDuration}} of delay penalty amounting to {{penaltyPercentage}}% of the total value of the Equipment whose delivery has been delayed. Any fractional part of a {{fractionalPart}} is to be considered a full {{fractionalPart}}. The total amount of penalty shall not however, exceed {{capPercentage}}% of the total value of the Equipment involved in late delivery. If the delay is more than {{termination}}, the Buyer is entitled to terminate this Contract.
 */

// Declare a contract over a template model
contract LateDeliveryAndPenalty over TemplateModel {
  // Clause checking for late delivery and calculating penalty
  clause latedeliveryandpenalty(request : LateDeliveryAndPenaltyRequest) : LateDeliveryAndPenaltyResponse {
    // Guard against calling late delivery clause too early
    let agreed = request.agreedDelivery;
    enforce isBefore(agreed,now()) else
    throw ErgoErrorResponse{ message : "Cannot exercise late delivery before delivery date" }
    ;
    // Guard against force majeure
    enforce !contract.forceMajeure or !request.forceMajeure else
    return LateDeliveryAndPenaltyResponse{
      penalty: 0.0,
      buyerMayTerminate: true
    }
    ;

    // Calculate the time difference between current date and agreed upon date
    let diff = diffDurationAs(now(),agreed,"days").amount;
    // Penalty formula
    let penalty =
      (integerToDouble(diff) / integerToDouble(contract.penaltyDuration.amount)) * contract.penaltyPercentage/100.0 * request.goodsValue;
    // Penalty may be capped
    let capped = min([penalty,contract.capPercentage * request.goodsValue / 100.0]);
    // Return the response with the penalty and termination determination
    return LateDeliveryAndPenaltyResponse{
      penalty: capped,
      buyerMayTerminate: diff > contract.termination.amount
    }
  }
}
